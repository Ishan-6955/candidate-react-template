# A descriptive name for your workflow, which will appear in the GitHub Actions UI.
name: Run Secure Lab Tests

# This section defines the trigger for the workflow.
# 'on: push' means this workflow will run every time code is pushed to any branch in this repository.
on: push

# This section defines the jobs that will be run. We only have one job named 'test'.
jobs:
  test:
    # Specifies the type of virtual machine to run the job on. 'ubuntu-latest' is a standard, clean Linux environment.
    runs-on: ubuntu-latest

    # This section contains the sequence of steps that make up the job.
    steps:
      # Step 1: Checkout the candidate's code.
      # 'uses: actions/checkout@v3' is a pre-built action that checks out the repository's code.
      - name: 1. Checkout Candidate Solution
        uses: actions/checkout@v4
        with:
          # We check it out into a subdirectory named 'solution' to match our test's import path.
          path: solution

      # Step 2: Checkout the private test suite.
      - name: 2. Checkout Private Tests
        uses: actions/checkout@v4
        with:
          # Specify the private repository to check out.
          # IMPORTANT: Replace 'YourGitHubUsername' with your actual GitHub username.
          repository: ishan-6955/secret-react-tests

          # This token is a secret we will create in Phase 3. It grants this workflow
          # permission to access your private repository.
          token: ${{ secrets.TESTS_REPO_TOKEN }}

          # Check out the private tests into a subdirectory named 'private-tests'.
          path: private-tests

      # Step 3: Set up the Node.js environment for the entire job.
      - name: 3. Setup Node.js Environment
        uses: actions/setup-node@v4
        with:
          # Specify the version of Node.js to use.
          node-version: "18"

      # Step 4: Install dependencies for the candidate's application.
      - name: 4. Install Candidate App Dependencies
        # 'run:' executes shell commands. We change directory into 'solution' and run npm install.
        run: cd solution && npm install

      # Step 5: Install dependencies for the private test suite.
      - name: 5. Install Test Suite Dependencies
        run: cd private-tests && npm install

      # Step 6: Run the tests.
      - name: 6. Run Tests and Save Raw Log
        # We don't need an 'id' for this step anymore.
        # The '|| true' at the end is critical. It ensures that if 'npm test' fails
        # (exits with a non-zero code), the 'true' command is executed, which exits with 0.
        # This prevents the workflow from stopping here and allows it to proceed to the parsing step.
        run: cd private-tests && npm test > ../raw_test_output.txt || true

      # Step 7: Parse the test output and create results.json.
      # This step uses a combination of shell tools to create a clean JSON file from the test output.
      - name: 7. Parse Log and Create JSON Result
        run: |
          # Instead of echoing a variable, we now use 'cat' to read the contents of our log file.
          # The rest of the pipeline (grep and jq) remains exactly the same, as it was already correct.
          cat raw_test_output.txt | \
          grep -E 'PASSED:|FAILED:' | \
          jq -R 'split(" | ") | {test: .[0] | split(": ")[1], status: .[0] | split(": ")[0], key: (if .[1] then .[1] | split(": ")[1] else null end)}' | \
          jq -s '.' > results.json

      # Step 8: Upload the results.json file as a downloadable artifact.
      - name: 8. Upload Results Artifact
        # This step will also run even if tests failed, allowing us to see partial results.
        if: always()
        uses: actions/upload-artifact@v4
        with:
          # The name of the artifact that will appear in the GitHub UI.
          name: test-results
          # The path to the file to upload.
          path: results.json
